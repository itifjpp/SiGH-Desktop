package views;

import controllers.ctrConfig;
import controllers.ctrlPacientes;
import controllers.tableModel;
import controllers.tableModelButton;
import java.awt.Dimension;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import static views.Principal.jdpEscritorio;
import views.pacientes.jifPaciente;

/**
 *
 * @author felipe de jesus
 */
public class jdlIngresoPacienteDetalle extends javax.swing.JDialog {

    /**
     * Creates new form dlIngresoPacienteDetalle
     */
    public static int intIdPaciente2=0;
    public jdlIngresoPacienteDetalle(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setTitle("Detalles del paciente");
      
        jdIngresoPacienteValidar v=new jdIngresoPacienteValidar(parent, modal);

        this.obtenerInformacionPaciente(v.intIdPaciente); 
        intIdPaciente2=v.intIdPaciente;
        tableConfig();
        tablePacientes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtblPacienteRegistros = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jtfPacienteId = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jtfPacienteNombre = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jtfPacienteFechaNac = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Detalles del paciente");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 195, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jtblPacienteRegistros.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jtblPacienteRegistros.setRowHeight(20);
        jtblPacienteRegistros.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtblPacienteRegistrosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtblPacienteRegistros);

        jLabel6.setText("CITAS ACTUALES");

        jLabel1.setText("ID DE PACIENTE");

        jtfPacienteId.setEditable(false);

        jLabel2.setText("NOMBRE");

        jtfPacienteNombre.setEditable(false);

        jLabel3.setText("FECHA DE NACIMIENTO");

        jtfPacienteFechaNac.setEditable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jtfPacienteNombre, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jtfPacienteId, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                            .addComponent(jtfPacienteFechaNac)))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtfPacienteId, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtfPacienteNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtfPacienteFechaNac, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jtblPacienteRegistrosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtblPacienteRegistrosMouseClicked
        int row = jtblPacienteRegistros.rowAtPoint(evt.getPoint());
        int col = jtblPacienteRegistros.columnAtPoint(evt.getPoint());

        if ( row >= 0 && col >= 0 ) {
            //si celda contiene imagen
            if( model.getValueAt(row, col) != null ){
                String strId=(String)jtblPacienteRegistros.getValueAt(row, 0);
                String strEstatus=(String)jtblPacienteRegistros.getValueAt(row, 2);
                if(!strEstatus.equals("Activo")){
                    return;
                }
                String strValue=jtblPacienteRegistros.getValueAt(row, col).toString();
                if(strValue.equals("CONFIRMAR LLEGADA")){
                     String[] buttons = { "Cancelar", "Si, confirmar"};

                    int opc = JOptionPane.showOptionDialog(null, "Confirmar llegada del paciente?", "Informaci√≥n",
                        JOptionPane.DEFAULT_OPTION, 0, null, buttons, buttons[1]);
                    if(opc==1){
                        try {
                            boolean bolUpdate=ctrlPacientes.pPacienteConfirmarCalendario(strId);
                            tablePacientes();
                        } catch (Exception e) {
                            ctrConfig.msjError("Error al procesar la solicitud:"+e.getMessage());
                        }
                    }
                }

            }
        }
    }//GEN-LAST:event_jtblPacienteRegistrosMouseClicked

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        
    }//GEN-LAST:event_formWindowClosing

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        jdIngresoPacienteValidar view=new jdIngresoPacienteValidar(null, rootPaneCheckingEnabled);
        view.setLocationRelativeTo(this);
        view.setVisible(true); 
    }//GEN-LAST:event_formWindowClosed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(jdlIngresoPacienteDetalle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(jdlIngresoPacienteDetalle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(jdlIngresoPacienteDetalle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(jdlIngresoPacienteDetalle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                jdlIngresoPacienteDetalle dialog = new jdlIngresoPacienteDetalle(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jtblPacienteRegistros;
    private javax.swing.JTextField jtfPacienteFechaNac;
    private javax.swing.JTextField jtfPacienteId;
    private javax.swing.JTextField jtfPacienteNombre;
    // End of variables declaration//GEN-END:variables
    public void obtenerInformacionPaciente(int intId){
        try {
            ResultSet rs=ctrlPacientes.getPaciente(intId);
            if(rs.next()){
                jtfPacienteId.setText(rs.getString("paciente_id"));
                jtfPacienteNombre.setText(rs.getString("paciente_nombre")+" "+rs.getString("paciente_ap")+" "+rs.getString("paciente_ap"));
                jtfPacienteFechaNac.setText(rs.getString("paciente_fn"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    DefaultTableModel model=new DefaultTableModel();
    public void tableConfig(){
        model=new DefaultTableModel(){//INDICAMOS QUE NO QUEREMOS QUE LAS CELDAS SEAN EDITABLES
            public boolean isCellEditable(int intRow, int intCol){
                return false;
            }
        };
        model.addColumn("ID");
        model.addColumn("FECHA Y HORA CITA");
        model.addColumn("ESTATUS");
        model.addColumn("ACCIONES");
        jtblPacienteRegistros.setModel(model);
        /*ESTABLECEMOS LAS DIMENCIONES DE LAS CELDAS DEL ENCABEZADO*/
        jtblPacienteRegistros.getColumnModel().getColumn(0).setMaxWidth(50);
        jtblPacienteRegistros.getColumnModel().getColumn(1).setMaxWidth(200);
        jtblPacienteRegistros.getColumnModel().getColumn(2).setMaxWidth(200);
        jtblPacienteRegistros.getColumnModel().getColumn(3).setMaxWidth(200);
        //jtEmpleados.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
        /*INDICAMOS QUE LOS ENCABEZADOS NO SE PUEDAD REORDENAR*/
        jtblPacienteRegistros.getTableHeader().setReorderingAllowed(false);
    }
    public void tablePacientes(){
        /*REMOVEMOS TODAS LAS FILAS DEL MODELO PARA POSTERIORMENTE AGREGAR LAS NUEVAS*/
        for (int i = jtblPacienteRegistros.getRowCount()-1; i >=0; i--) {
            model.removeRow(i);
            
        }
 
        try {
            ResultSet rs=null;
            rs=ctrlPacientes.getPacientesCalendario(intIdPaciente2);
            while (rs.next()) {                
                Object object[]={
                    rs.getString("calendario_id"),
                    rs.getString("calendario_fi")+" "+rs.getString("calendario_hora"),rs.getString("calendario_estatus"),"CONFIRMAR LLEGADA" 
                };
                jtblPacienteRegistros.getColumnModel().getColumn(3).setCellRenderer(new tableModelButton()); 
                model.addRow(object);
                jtblPacienteRegistros.setModel(model);
                jtblPacienteRegistros.setRowHeight(1, 30);
            }
        } catch (SQLException e) {
            e.getMessage();
            ctrConfig.msjError("ERROR AL OBTENER LA LISTA DE PACIENTES: "+e.getMessage());
        }
        jtblPacienteRegistros.setRowHeight(30);
    }
}
